/* Program Name: Arithmetic
 * Name: Surya Teja Mazundar
 * Professor Name: Dr. Jens Gregor
 * NetID: smazunda
 * StudentID: 000718553
 * Sources: cplusplus.com, notes (canvas), searched to understand the logics
 */

#include <iostream>
#include <vector>
#include <cstdlib>
#include <string>
#include <algorithm>

using namespace std;

// Global flags for controlling program behavior
bool success = false; // if at least one valid solution was found
bool findall = false; // sees if it has to find all solutions or stop after the first
bool verbose = false; // prints out every step
string mode = "inorder"; 

void show_solution(vector<int> &numbers, vector<int> &operations) {
	string signs = "*/+-";
	string ops;

	if (verbose) {
		int result = numbers[0];
		cout << numbers[0];

		// Convert operation index to symbol
		for (size_t i = 0; i < operations.size(); ++i) {
			if (operations[i] == 0) {
				cout <<	"*";
			} else if (operations[i] == 1) {
				cout <<	"/";
			} else if (operations[i] == 2) {
				cout <<	"+";
			} else if (operations[i] == 3) {
				cout <<	"-";
			}

			// Print the operation and the next number
			cout << numbers[i + 1];

			// Evaluate expression step-by-step
			if (operations[i] == 0) {
				result += numbers[i + 1];
			} else if (operations[i] == 1) {
				result -= numbers[i + 1];
			} else if (operations[i] == 2) {
				result *= numbers[i + 1];
			} else if (operations[i] == 3) {
				result /= numbers[i + 1];
			}
		}

		// Final output
		cout << "=" << numbers.back() << " ";
	}

	for (size_t i = 0; i < operations.size(); ++i) {
		ops += signs[operations[i]];
	}
	// Operations used
	cout << ops << endl;
}

// Recursion to find a sequence of operations that results in target value
bool find_solution(vector<int> &numbers, vector<int> &operations, int k=0, int fvalue=0) {

	if (k == 0) {
		operations.clear(); // Reset the operations vector
		if (numbers.empty()) { // if there are no numbers
			return false;
		}
		return find_solution(numbers, operations, 1, numbers[0]); // Start recursion with the first number
	}

	// When last number is reached 
	if ((size_t)k == numbers.size() - 1) {
		if (fvalue == numbers.back()) { // If arrived at target value
			show_solution(numbers, operations);
			success = true;
			if (findall) { 
				return false; // Continue searching for more solutions
			} else {
				return true; // Stop after finding one solution
			}
		}
		return false; // No solution found 
	}

	int next = numbers[k + 1];
	
	for (int sign = 0; sign < 4; ++sign) {
		int result = fvalue;
		if (sign == 0) {
			result *= next;
		} else if (sign == 1) {
			result /= next;
		} else if (sign == 2) {
			result += next;
		} else if (sign == 3) {
			result -= next;
		}

	//	vector<int> order;
	//	order.push_back(0); // Multiplication
	//	order.push_back(1); // Division
	//	order.push_back(2); // Addition
	//	order.push_back(3); // Subtraction

	/*	for (size_t i = 0; i < order.size(); ++i) {
		int value; // Stores the result of applying the operation

	// Performs the operation
	if (order[i] == 2) { // Multiplication
	value = fvalue * numbers[k];
	} else if (order[i] == 3) { // Division
	if (numbers[k] == 0 || fvalue % numbers[k] != 0) { // Skips invalid divisions
	continue;
	}
	value = fvalue / numbers[k];
	} else if (order[i] == 0) { // Addition
	value = fvalue + numbers[k];
	} else if (order[i] == 1) { // Subtraction
	value = fvalue - numbers[k];
	} else {
	continue; // Skips invalid operations
	}
	*/
	// Add the operation to the operations vector
	operations.push_back(sign);

	// Recursive call to process the next number
	bool foundSolution = find_solution(numbers, operations, k + 1, result);
	if (foundSolution && !findall) { // Stops if only one solution is needed
		return true;
	}
	// Backtrack: Removes the last operation to explore other possibilities
	operations.pop_back();
	}
	return false; // No solution found
	}

	int main(int argc, char *argv[]) {
		vector<int> numbers, operations;
//		vector<int> input_numbers;

		if (argc < 2) {
			cerr << "Usage: " << argv[0] << " [-all] [-verbose] mode target n1 n2 n3 ..." << endl;
			return 1;
		}

		int argin = 1;

		// Parse command line flags
		while (argin < argc && argv[argin][0] == '-') {
			string flag = argv[argin];

			if (flag == "-N") {
				findall = true;
			} else if (flag == "-verbose") {
				verbose = true;
			} else if (flag == "-inorder") {
				mode = "inorder";
			} else if (flag == "-anyorder") {
				mode = "anyorder";
			} else if (flag == "-1") {
				findall = false;
			} else {
				cerr << "Unknown option: " << flag << endl;
				return 1;
			}
			argin++;
		}

		// Read numbers from standard in 
		while (argin < argc) {
			numbers.push_back(atoi(argv[argin]));
			argin++;
		}

		// Read numbers from stdin if no arguments are left
		if (numbers.empty()) {
			int val;
			while (cin >> val) {
				numbers.push_back(val);
			}
		}

		// Checks if tjere are at least two numbers (operand and target value)
		if (numbers.size() < 2) {
			cerr << "Error: Need at least two numbers (operands and target)" << endl;
			return 1;
		}

		// Extracts the target value
		int target = numbers.back();
		numbers.pop_back();

		// Add the target back to the end of the numbers vector
		//numbers = input_numbers;
		//	numbers.push_back(target);

		// Evaluates based on selected mode
		if (mode == "inorder") {
			numbers.push_back(target);
			find_solution(numbers, operations);
		} else if (mode == "anyorder") {
			sort(numbers.begin(), numbers.end());

			do {
success = false;
                operations.clear();
				numbers.push_back(target);
				//vector<int> current = numbers;
				if (find_solution(numbers, operations) && !findall) {
					break;
				}
				//success = false;
				//operations.clear();
				numbers.pop_back();
			} while (next_permutation(numbers.begin(), numbers.end()));
		}else {
			cerr << "Invalid mode. Use 'inorder' or 'anyorder'" << endl;
			return 1;
		}



//		if (!success) {
//			cout << "No solution found." << endl;
//		}

		return 0;
	}
